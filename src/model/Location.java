package model;

/**
 * Encapsulates coordinates inside {@link TextEditorModel}.
 */
public class Location {

    private int mX;
    private int mY;

    public Location() {
        mX = 0;
        mY = 0;
    }

    public Location(int x, int y) {
        mX = x;
        mY = y;
    }

    public Location(Location location) {
        mX = location.getX();
        mY = location.getY();
    }

    /**
     * Method returns the x component of the {@link Location} object.
     * @return primitive int.
     */
    public int getX() {
        return mX;
    }

    /**
     * Method sets an x component of the {@link Location} object.
     * @param x primitive int.
     */
    public void setX(int x) {
        mX = x;
    }

    public int getY() {
        return mY;
    }

    public void setY(int y) {
        mY = y;
    }

    /**
     * Method takes x and y from location object and puts it in another
     * location object.
     *
     * @param location {@link Location}.
     */
    public void setLocation(Location location) {
        mX = location.getX();
        mY = location.getY();
    }

    /**
     * Method takes x and y as parameters and puts them in this location
     * object.
     *
     * @param x <b>int</b>
     * @param y <b>int</b>
     */
    public void setLocation(int x, int y) {
        mX = x;
        mY = y;
    }

    /**
     * Method moves the location horizontally.
     *
     * @param step int tells how much to move the location.
     * @return the same object this method was called on.
     * @deprecated Use {@link Location#setX(int)}.
     */
    public Location moveHorizontal(int step) {
        mX += step;
        return this;
    }

    /**
     * Method moves the location vertically.
     *
     * @param step int tells how much to move the location.
     * @return the same object this method was called on.
     * @deprecated Use {@link Location#setY(int)}.
     */
    public Location moveVertical(int step) {
        mY += step;
        return this;
    }

    /**
     * Two {@link Location} objects are deemed equal if their x and y components
     * are equal. Method will return true if two objects are equal.
     *
     * @param o {@link Object} another object to be tested.
     * @return primitive boolean, true if objects are equal.
     */
    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;

        Location location = (Location) o;

        return mX == location.mX && mY == location.mY;
    }

    /**
     * Method returns a hash number for this object.
     * Method was generated by IntelliJ software.
     *
     * @return primitive int number.
     */
    @Override
    public int hashCode() {
        int result = mX;
        result = 31 * result + mY;
        return result;
    }

    /**
     * Method returns {@link String} representation of the location.
     *
     * @return {@link String}.
     */
    @Override
    public String toString() {
        return mX + " " + mY;
    }
}
